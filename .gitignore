#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_SENSORS 100
#define MAX_READINGS 50
#define MAX_SENSOR_ID 70
#define MAX_VALUE_LEN 80

typedef struct {
    time_t timestamp;
    char value[MAX_VALUE_LEN];
} Reading;

typedef struct {
    char sensor_id[MAX_SENSOR_ID];
    Reading readings[MAX_READINGS];
    int reading_count;
} SensorData;

int compare_readings(const void *a, const void *b) {
    Reading *r1 = (Reading *)a;
    Reading *r2 = (Reading *)b;
    return (r1->timestamp - r2->timestamp);
}

int find_or_add_sensor(SensorData sensors[], int *sensor_count, const char *sensor_id) {
    for (int i = 0; i < *sensor_count; i++) {
        if (strcmp(sensors[i].sensor_id, sensor_id) == 0) {
            return i;
        }
    }
    if (*sensor_count >= MAX_SENSORS) {
        fprintf(stderr, "Erro: número máximo de sensores excedido.\n");
        exit(1);
    }
    strcpy(sensors[*sensor_count].sensor_id, sensor_id);
    sensors[*sensor_count].reading_count = 0;
    return (*sensor_count)++;
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Uso: %s <arquivo_entrada>\n", argv[0]);
        return 1;
    }

    FILE *input_file = fopen(argv[1], "r");
    if (!input_file) {
        perror("Erro ao abrir o arquivo");
        return 1;
    }

    SensorData sensors[MAX_SENSORS];
    int sensor_count = 0;

    char line[256];
    while (fgets(line, sizeof(line), input_file)) {
        time_t timestamp;
        char sensor_id[MAX_SENSOR_ID];
        char value[MAX_VALUE_LEN];

        if (sscanf(line, "%ld %s %s", &timestamp, sensor_id, value) == 3) {
            int index = find_or_add_sensor(sensors, &sensor_count, sensor_id);
            SensorData *sensor = &sensors[index];
            if (sensor->reading_count >= MAX_READINGS) {
                fprintf(stderr, "Erro: número máximo de leituras excedido para o sensor %s\n", sensor_id);
                continue;
            }
            sensor->readings[sensor->reading_count].timestamp = timestamp;
            strcpy(sensor->readings[sensor->reading_count].value, value);
            sensor->reading_count++;
        }
    }

    fclose(input_file);

    for (int i = 0; i < sensor_count; i++) {
        SensorData *s = &sensors[i];
        qsort(s->readings, s->reading_count, sizeof(Reading), compare_readings);

        char output_filename[100];
        snprintf(output_filename, sizeof(output_filename), "%s.txt", s->sensor_id);

        FILE *output_file = fopen(output_filename, "w");
        if (!output_file) {
            perror("Erro ao criar arquivo de saída");
            continue;
        }

        for (int j = 0; j < s->reading_count; j++) {
            fprintf(output_file, "%ld %s %s\n",
                    s->readings[j].timestamp,
                    s->sensor_id,
                    s->readings[j].value);
        }

        fclose(output_file);
    }

    printf("Processamento concluído com sucesso. %d sensores identificados.\n", sensor_count);
    return 0;
}



#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define TAM_LINHA 326
#define TAM_ID 60
#define TAM_VALOR 80

typedef struct {
    time_t marca_tempo;
    char sensor_id[TAM_ID];
    char valor_lido[TAM_VALOR];
} DadoSensor;

time_t converter_para_timestamp(int dia, int mes, int ano, int hora, int min, int seg) {
    struct tm t;
    t.tm_year = ano - 1900;
    t.tm_mon = mes - 1;
    t.tm_mday = dia;
    t.tm_hour = hora;
    t.tm_min = min;
    t.tm_sec = seg;
    t.tm_isdst = -1;
    return mktime(&t);
}

int carregar_dados(const char *arquivo_sensor, DadoSensor **dados, int *total_dados) {
    FILE *arquivo = fopen(arquivo_sensor, "r");
    if (!arquivo) {
        perror("Erro ao abrir arquivo do sensor");
        return 0;
    }

    int capacidade = 2000;
    *dados = malloc(capacidade * sizeof(DadoSensor));
    *total_dados = 0;

    char linha_entrada[TAM_LINHA];
    while (fgets(linha_entrada, sizeof(linha_entrada), arquivo)) {
        DadoSensor dado;
        if (sscanf(linha_entrada, "%ld %s %s", &dado.marca_tempo, dado.sensor_id, dado.valor_lido) == 3) {
            if (*total_dados >= capacidade) {
                capacidade *= 4;
                *dados = realloc(*dados, capacidade * sizeof(DadoSensor));
            }
            (*dados)[(*total_dados)++] = dado;
        }
    }

    fclose(arquivo);
    return 1;
}

int busca_binaria_mais_proxima(DadoSensor *dados, int total_dados, time_t alvo_timestamp) {
    int esquerda = 0, direita = total_dados - 1;
    int indice_mais_proximo = 0;
    long menor_diferenca = labs(dados[0].marca_tempo - alvo_timestamp);

    while (esquerda <= direita) {
        int meio = (esquerda + direita) / 2;
        long diferenca = labs(dados[meio].marca_tempo - alvo_timestamp);

        if (diferenca < menor_diferenca) {
            menor_diferenca = diferenca;
            indice_mais_proximo = meio;
        }

        if (dados[meio].marca_tempo < alvo_timestamp) {
            esquerda = meio + 1;
        } else if (dados[meio].marca_tempo > alvo_timestamp) {
            direita = meio - 1;
        } else {
            return meio;
        }
    }

    return indice_mais_proximo;
}

int main(int argc, char *argv[]) {
    if (argc != 8) {
        printf("Uso: %s <sensor> <dia> <mes> <ano> <hora> <min> <seg>\n", argv[0]);
        return 1;
    }

    const char *nome_sensor = argv[1];
    int dia = atoi(argv[2]);
    int mes = atoi(argv[3]);
    int ano = atoi(argv[4]);
    int hora = atoi(argv[5]);
    int min = atoi(argv[6]);
    int seg = atoi(argv[7]);

    time_t alvo_timestamp = converter_para_timestamp(dia, mes, ano, hora, min, seg);

    char arquivo_sensor[80];
    snprintf(arquivo_sensor, sizeof(arquivo_sensor), "%s.txt", nome_sensor);

    DadoSensor *dados = NULL;
    int total_dados = 0;

    if (!carregar_dados(arquivo_sensor, &dados, &total_dados)) {
        return 1;
    }

    if (total_dados == 0) {
        printf("Nenhuma leitura encontrada para o sensor %s.\n", nome_sensor);
        free(dados);
        return 1;
    }

    int indice = busca_binaria_mais_proxima(dados, total_dados, alvo_timestamp);
    DadoSensor dado = dados[indice];

    printf("Leitura mais próxima:\n");
    printf("Timestamp: %ld\nSensor: %s\nValor: %s\n", dado.marca_tempo, dado.sensor_id, dado.valor_lido);

    free(dados);
    return 0;
}


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <ctype.h>

#define NUMERO_DE_LEITURAS 2000
#define TAMANHO_MAX_STRING 17

time_t gerar_timestamp(int dia, int mes, int ano, int hora, int minuto, int segundo) {
    struct tm data_hora;
    data_hora.tm_year = ano - 1900;
    data_hora.tm_mon = mes - 1;
    data_hora.tm_mday = dia;
    data_hora.tm_hour = hora;
    data_hora.tm_min = minuto;
    data_hora.tm_sec = segundo;
    data_hora.tm_isdst = -1;
    return mktime(&data_hora);
}

char* gerar_string_aleatoria() {
    static char string_aleatoria[TAMANHO_MAX_STRING];
    int tamanho = rand() % (TAMANHO_MAX_STRING - 1) + 1;  // Entre 1 e 16

    for (int i = 0; i < tamanho; i++) {
        string_aleatoria[i] = 'A' + rand() % 26;
    }
    string_aleatoria[tamanho] = '\0';
    return string_aleatoria;
}

void gerar_valor_aleatorio(char *tipo_dado, char *saida) {
    if (strcmp(tipo_dado, "int") == 0) {
        sprintf(saida, "%d", rand() % 1000);
    } else if (strcmp(tipo_dado, "float") == 0) {
        sprintf(saida, "%.2f", (rand() % 100000) / 100.0);
    } else if (strcmp(tipo_dado, "bool") == 0) {
        strcpy(saida, (rand() % 2) ? "true" : "false");
    } else if (strcmp(tipo_dado, "str") == 0) {
        strcpy(saida, gerar_string_aleatoria());
    } else {
        fprintf(stderr, "Tipo de dado inválido: %s\n", tipo_dado);
        exit(1);
    }
}

int main(int argc, char *argv[]) {
    if (argc < 15) {
        fprintf(stderr, "Uso: %s <dia_ini> <mes_ini> <ano_ini> <hora_ini> <min_ini> <seg_ini> <dia_fim> <mes_fim> <ano_fim> <hora_fim> <min_fim> <seg_fim> <arquivo_saida> <sensor:tipo> [...]\n", argv[0]);
        return 1;
    }

    srand(time(NULL));

    int dia_inicio = atoi(argv[1]), mes_inicio = atoi(argv[2]), ano_inicio = atoi(argv[3]);
    int hora_inicio = atoi(argv[4]), minuto_inicio = atoi(argv[5]), segundo_inicio = atoi(argv[6]);
    int dia_fim = atoi(argv[7]), mes_fim = atoi(argv[8]), ano_fim = atoi(argv[9]);
    int hora_fim = atoi(argv[10]), minuto_fim = atoi(argv[11]), segundo_fim = atoi(argv[12]);

    const char *nome_arquivo_saida = argv[13];

    time_t timestamp_inicio = gerar_timestamp(dia_inicio, mes_inicio, ano_inicio, hora_inicio, minuto_inicio, segundo_inicio);
    time_t timestamp_fim = gerar_timestamp(dia_fim, mes_fim, ano_fim, hora_fim, minuto_fim, segundo_fim);

    if (timestamp_fim <= timestamp_inicio) {
        fprintf(stderr, "Erro: a data/hora final deve ser posterior à inicial.\n");
        return 1;
    }

    FILE *arquivo = fopen(nome_arquivo_saida, "w");
    if (!arquivo) {
        perror("Erro ao criar o arquivo de saída");
        return 1;
    }

    for (int i = 14; i < argc; i++) {
        char *separador = strchr(argv[i], ':');
        if (!separador) {
            fprintf(stderr, "Formato inválido para sensor: %s (esperado: nome:tipo)\n", argv[i]);
            continue;
        }

        *separador = '\0';
        char *id_sensor = argv[i];
        char *tipo_dado = separador + 1;

        for (int j = 0; j < NUMERO_DE_LEITURAS; j++) {
            time_t timestamp_randomico = timestamp_inicio + rand() % (timestamp_fim - timestamp_inicio + 1);
            char valor_gerado[64];
            gerar_valor_aleatorio(tipo_dado, valor_gerado);
            fprintf(arquivo, "%ld %s %s\n", timestamp_randomico, id_sensor, valor_gerado);
        }
    }

    fclose(arquivo);
    printf("Arquivo '%s' gerado com sucesso.\n", nome_arquivo_saida);
    return 0;
}
